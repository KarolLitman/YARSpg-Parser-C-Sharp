//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from YARSpg.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class YARSpgParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, STRING=11, NUMBER=12, NULL=13, TRUE_FALSE=14, STRING_LITERAL_QUOTE=15, 
		ALNUM_PLUS=16, PN_CHARS=17, PN_CHARS_U=18, UCHAR=19, PN_CHARS_BASE=20, 
		HEX=21, SP=22, NL=23;
	public const int
		RULE_yarspg = 0, RULE_statement = 1, RULE_declaration = 2, RULE_nodeDeclaration = 3, 
		RULE_relationship = 4, RULE_directed = 5, RULE_undirected = 6, RULE_relationship_label = 7, 
		RULE_node_label = 8, RULE_prop = 9, RULE_key = 10, RULE_value = 11, RULE_single_key_value = 12, 
		RULE_multiple_key_values = 13;
	public static readonly string[] ruleNames = {
		"yarspg", "statement", "declaration", "nodeDeclaration", "relationship", 
		"directed", "undirected", "relationship_label", "node_label", "prop", 
		"key", "value", "single_key_value", "multiple_key_values"
	};

	private static readonly string[] _LiteralNames = {
		null, "':'", "'{'", "','", "'}'", "'('", "')'", "'-'", "'['", "']'", "'->'", 
		null, null, "'null'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "STRING", 
		"NUMBER", "NULL", "TRUE_FALSE", "STRING_LITERAL_QUOTE", "ALNUM_PLUS", 
		"PN_CHARS", "PN_CHARS_U", "UCHAR", "PN_CHARS_BASE", "HEX", "SP", "NL"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "YARSpg.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static YARSpgParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public YARSpgParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public YARSpgParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class YarspgContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode[] NL() { return GetTokens(YARSpgParser.NL); }
		public ITerminalNode NL(int i) {
			return GetToken(YARSpgParser.NL, i);
		}
		public YarspgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_yarspg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterYarspg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitYarspg(this);
		}
	}

	[RuleVersion(0)]
	public YarspgContext yarspg() {
		YarspgContext _localctx = new YarspgContext(Context, State);
		EnterRule(_localctx, 0, RULE_yarspg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 36;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__4 || _la==ALNUM_PLUS) {
				{
				{
				State = 28; statement();
				State = 30;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 29; Match(NL);
					}
					}
					State = 32;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==NL );
				}
				}
				State = 38;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39; declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public NodeDeclarationContext nodeDeclaration() {
			return GetRuleContext<NodeDeclarationContext>(0);
		}
		public RelationshipContext relationship() {
			return GetRuleContext<RelationshipContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_declaration);
		try {
			State = 43;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALNUM_PLUS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 41; nodeDeclaration();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 2);
				{
				State = 42; relationship();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NodeDeclarationContext : ParserRuleContext {
		public Node_labelContext[] node_label() {
			return GetRuleContexts<Node_labelContext>();
		}
		public Node_labelContext node_label(int i) {
			return GetRuleContext<Node_labelContext>(i);
		}
		public PropContext[] prop() {
			return GetRuleContexts<PropContext>();
		}
		public PropContext prop(int i) {
			return GetRuleContext<PropContext>(i);
		}
		public NodeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nodeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterNodeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitNodeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NodeDeclarationContext nodeDeclaration() {
		NodeDeclarationContext _localctx = new NodeDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_nodeDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 45; node_label();
			State = 50;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 46; Match(T__0);
					State = 47; node_label();
					}
					} 
				}
				State = 52;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 53; Match(T__0);
			State = 54; Match(T__1);
			State = 55; prop();
			State = 60;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 56; Match(T__2);
				State = 57; prop();
				}
				}
				State = 62;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 63; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationshipContext : ParserRuleContext {
		public DirectedContext directed() {
			return GetRuleContext<DirectedContext>(0);
		}
		public UndirectedContext undirected() {
			return GetRuleContext<UndirectedContext>(0);
		}
		public RelationshipContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationship; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterRelationship(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitRelationship(this);
		}
	}

	[RuleVersion(0)]
	public RelationshipContext relationship() {
		RelationshipContext _localctx = new RelationshipContext(Context, State);
		EnterRule(_localctx, 8, RULE_relationship);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; directed();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; undirected();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectedContext : ParserRuleContext {
		public Node_labelContext[] node_label() {
			return GetRuleContexts<Node_labelContext>();
		}
		public Node_labelContext node_label(int i) {
			return GetRuleContext<Node_labelContext>(i);
		}
		public Relationship_labelContext relationship_label() {
			return GetRuleContext<Relationship_labelContext>(0);
		}
		public PropContext[] prop() {
			return GetRuleContexts<PropContext>();
		}
		public PropContext prop(int i) {
			return GetRuleContext<PropContext>(i);
		}
		public DirectedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_directed; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterDirected(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitDirected(this);
		}
	}

	[RuleVersion(0)]
	public DirectedContext directed() {
		DirectedContext _localctx = new DirectedContext(Context, State);
		EnterRule(_localctx, 10, RULE_directed);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69; Match(T__4);
			State = 70; node_label();
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 71; Match(T__0);
				State = 72; node_label();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 78; Match(T__5);
			State = 79; Match(T__6);
			State = 80; Match(T__7);
			State = 81; relationship_label();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 82; Match(T__1);
				State = 83; prop();
				State = 88;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 84; Match(T__2);
					State = 85; prop();
					}
					}
					State = 90;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 91; Match(T__3);
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98; Match(T__8);
			State = 99; Match(T__9);
			State = 100; Match(T__4);
			State = 101; node_label();
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 102; Match(T__0);
				State = 103; node_label();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 109; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndirectedContext : ParserRuleContext {
		public Node_labelContext[] node_label() {
			return GetRuleContexts<Node_labelContext>();
		}
		public Node_labelContext node_label(int i) {
			return GetRuleContext<Node_labelContext>(i);
		}
		public Relationship_labelContext relationship_label() {
			return GetRuleContext<Relationship_labelContext>(0);
		}
		public PropContext[] prop() {
			return GetRuleContexts<PropContext>();
		}
		public PropContext prop(int i) {
			return GetRuleContext<PropContext>(i);
		}
		public UndirectedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undirected; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterUndirected(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitUndirected(this);
		}
	}

	[RuleVersion(0)]
	public UndirectedContext undirected() {
		UndirectedContext _localctx = new UndirectedContext(Context, State);
		EnterRule(_localctx, 12, RULE_undirected);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 111; Match(T__4);
			State = 112; node_label();
			State = 117;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 113; Match(T__0);
				State = 114; node_label();
				}
				}
				State = 119;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 120; Match(T__5);
			State = 121; Match(T__6);
			State = 122; Match(T__7);
			State = 123; relationship_label();
			State = 137;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 124; Match(T__1);
				State = 125; prop();
				State = 130;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__2) {
					{
					{
					State = 126; Match(T__2);
					State = 127; prop();
					}
					}
					State = 132;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 133; Match(T__3);
				}
				}
				State = 139;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 140; Match(T__8);
			State = 141; Match(T__6);
			State = 142; Match(T__4);
			State = 143; node_label();
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__0) {
				{
				{
				State = 144; Match(T__0);
				State = 145; node_label();
				}
				}
				State = 150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 151; Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Relationship_labelContext : ParserRuleContext {
		public ITerminalNode ALNUM_PLUS() { return GetToken(YARSpgParser.ALNUM_PLUS, 0); }
		public Relationship_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationship_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterRelationship_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitRelationship_label(this);
		}
	}

	[RuleVersion(0)]
	public Relationship_labelContext relationship_label() {
		Relationship_labelContext _localctx = new Relationship_labelContext(Context, State);
		EnterRule(_localctx, 14, RULE_relationship_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 153; Match(ALNUM_PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Node_labelContext : ParserRuleContext {
		public ITerminalNode ALNUM_PLUS() { return GetToken(YARSpgParser.ALNUM_PLUS, 0); }
		public Node_labelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_node_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterNode_label(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitNode_label(this);
		}
	}

	[RuleVersion(0)]
	public Node_labelContext node_label() {
		Node_labelContext _localctx = new Node_labelContext(Context, State);
		EnterRule(_localctx, 16, RULE_node_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155; Match(ALNUM_PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public PropContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prop; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterProp(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitProp(this);
		}
	}

	[RuleVersion(0)]
	public PropContext prop() {
		PropContext _localctx = new PropContext(Context, State);
		EnterRule(_localctx, 18, RULE_prop);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; key();
			State = 158; Match(T__0);
			State = 159; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public ITerminalNode ALNUM_PLUS() { return GetToken(YARSpgParser.ALNUM_PLUS, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitKey(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 20, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(ALNUM_PLUS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Single_key_valueContext single_key_value() {
			return GetRuleContext<Single_key_valueContext>(0);
		}
		public Multiple_key_valuesContext multiple_key_values() {
			return GetRuleContext<Multiple_key_valuesContext>(0);
		}
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 22, RULE_value);
		try {
			State = 165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case NULL:
			case TRUE_FALSE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 163; single_key_value();
				}
				break;
			case T__7:
				EnterOuterAlt(_localctx, 2);
				{
				State = 164; multiple_key_values();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_key_valueContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(YARSpgParser.STRING, 0); }
		public ITerminalNode NUMBER() { return GetToken(YARSpgParser.NUMBER, 0); }
		public ITerminalNode NULL() { return GetToken(YARSpgParser.NULL, 0); }
		public ITerminalNode TRUE_FALSE() { return GetToken(YARSpgParser.TRUE_FALSE, 0); }
		public Single_key_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_key_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterSingle_key_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitSingle_key_value(this);
		}
	}

	[RuleVersion(0)]
	public Single_key_valueContext single_key_value() {
		Single_key_valueContext _localctx = new Single_key_valueContext(Context, State);
		EnterRule(_localctx, 24, RULE_single_key_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << NUMBER) | (1L << NULL) | (1L << TRUE_FALSE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Multiple_key_valuesContext : ParserRuleContext {
		public Single_key_valueContext[] single_key_value() {
			return GetRuleContexts<Single_key_valueContext>();
		}
		public Single_key_valueContext single_key_value(int i) {
			return GetRuleContext<Single_key_valueContext>(i);
		}
		public Multiple_key_valuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiple_key_values; } }
		public override void EnterRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.EnterMultiple_key_values(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IYARSpgListener typedListener = listener as IYARSpgListener;
			if (typedListener != null) typedListener.ExitMultiple_key_values(this);
		}
	}

	[RuleVersion(0)]
	public Multiple_key_valuesContext multiple_key_values() {
		Multiple_key_valuesContext _localctx = new Multiple_key_valuesContext(Context, State);
		EnterRule(_localctx, 26, RULE_multiple_key_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 169; Match(T__7);
			State = 170; single_key_value();
			State = 175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 171; Match(T__2);
				State = 172; single_key_value();
				}
				}
				State = 177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 178; Match(T__8);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x19', '\xB7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x3', '\x2', '\x3', '\x2', '\x6', '\x2', 
		'!', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\"', '\a', '\x2', '%', '\n', 
		'\x2', '\f', '\x2', '\xE', '\x2', '(', '\v', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', '.', '\n', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '\x33', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', '\x36', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', '=', '\n', '\x5', 
		'\f', '\x5', '\xE', '\x5', '@', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x46', '\n', '\x6', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'L', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'O', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\a', '\a', 'Y', '\n', '\a', '\f', '\a', '\xE', '\a', '\\', '\v', '\a', 
		'\x3', '\a', '\x3', '\a', '\a', '\a', '`', '\n', '\a', '\f', '\a', '\xE', 
		'\a', '\x63', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'k', '\n', '\a', '\f', '\a', 
		'\xE', '\a', 'n', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 'v', '\n', '\b', '\f', '\b', 
		'\xE', '\b', 'y', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'\x83', '\n', '\b', '\f', '\b', '\xE', '\b', '\x86', '\v', '\b', '\x3', 
		'\b', '\x3', '\b', '\a', '\b', '\x8A', '\n', '\b', '\f', '\b', '\xE', 
		'\b', '\x8D', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\a', '\b', '\x95', '\n', '\b', '\f', 
		'\b', '\xE', '\b', '\x98', '\v', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '\xA8', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xB0', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xB3', '\v', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x2', '\x2', '\x10', '\x2', '\x4', '\x6', 
		'\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', 
		'\x1C', '\x2', '\x3', '\x3', '\x2', '\r', '\x10', '\x2', '\xB8', '\x2', 
		'&', '\x3', '\x2', '\x2', '\x2', '\x4', ')', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '-', '\x3', '\x2', '\x2', '\x2', '\b', '/', '\x3', '\x2', '\x2', 
		'\x2', '\n', '\x45', '\x3', '\x2', '\x2', '\x2', '\f', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'q', '\x3', '\x2', '\x2', '\x2', '\x10', '\x9B', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x9D', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA3', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xAB', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', ' ', '\x5', '\x4', '\x3', '\x2', '\x1F', '!', '\a', '\x19', '\x2', 
		'\x2', ' ', '\x1F', '\x3', '\x2', '\x2', '\x2', '!', '\"', '\x3', '\x2', 
		'\x2', '\x2', '\"', ' ', '\x3', '\x2', '\x2', '\x2', '\"', '#', '\x3', 
		'\x2', '\x2', '\x2', '#', '%', '\x3', '\x2', '\x2', '\x2', '$', '\x1E', 
		'\x3', '\x2', '\x2', '\x2', '%', '(', '\x3', '\x2', '\x2', '\x2', '&', 
		'$', '\x3', '\x2', '\x2', '\x2', '&', '\'', '\x3', '\x2', '\x2', '\x2', 
		'\'', '\x3', '\x3', '\x2', '\x2', '\x2', '(', '&', '\x3', '\x2', '\x2', 
		'\x2', ')', '*', '\x5', '\x6', '\x4', '\x2', '*', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '+', '.', '\x5', '\b', '\x5', '\x2', ',', '.', '\x5', '\n', 
		'\x6', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', ',', '\x3', '\x2', 
		'\x2', '\x2', '.', '\a', '\x3', '\x2', '\x2', '\x2', '/', '\x34', '\x5', 
		'\x12', '\n', '\x2', '\x30', '\x31', '\a', '\x3', '\x2', '\x2', '\x31', 
		'\x33', '\x5', '\x12', '\n', '\x2', '\x32', '\x30', '\x3', '\x2', '\x2', 
		'\x2', '\x33', '\x36', '\x3', '\x2', '\x2', '\x2', '\x34', '\x32', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x35', '\x3', '\x2', '\x2', '\x2', '\x35', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\x37', '\x38', '\a', '\x3', '\x2', '\x2', '\x38', '\x39', '\a', 
		'\x4', '\x2', '\x2', '\x39', '>', '\x5', '\x14', '\v', '\x2', ':', ';', 
		'\a', '\x5', '\x2', '\x2', ';', '=', '\x5', '\x14', '\v', '\x2', '<', 
		':', '\x3', '\x2', '\x2', '\x2', '=', '@', '\x3', '\x2', '\x2', '\x2', 
		'>', '<', '\x3', '\x2', '\x2', '\x2', '>', '?', '\x3', '\x2', '\x2', '\x2', 
		'?', '\x41', '\x3', '\x2', '\x2', '\x2', '@', '>', '\x3', '\x2', '\x2', 
		'\x2', '\x41', '\x42', '\a', '\x6', '\x2', '\x2', '\x42', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '\x46', '\x5', '\f', '\a', '\x2', '\x44', 
		'\x46', '\x5', '\xE', '\b', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', 
		'\x2', '\x45', '\x44', '\x3', '\x2', '\x2', '\x2', '\x46', '\v', '\x3', 
		'\x2', '\x2', '\x2', 'G', 'H', '\a', '\a', '\x2', '\x2', 'H', 'M', '\x5', 
		'\x12', '\n', '\x2', 'I', 'J', '\a', '\x3', '\x2', '\x2', 'J', 'L', '\x5', 
		'\x12', '\n', '\x2', 'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'O', '\x3', 
		'\x2', '\x2', '\x2', 'M', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\x3', 
		'\x2', '\x2', '\x2', 'N', 'P', '\x3', '\x2', '\x2', '\x2', 'O', 'M', '\x3', 
		'\x2', '\x2', '\x2', 'P', 'Q', '\a', '\b', '\x2', '\x2', 'Q', 'R', '\a', 
		'\t', '\x2', '\x2', 'R', 'S', '\a', '\n', '\x2', '\x2', 'S', '\x61', '\x5', 
		'\x10', '\t', '\x2', 'T', 'U', '\a', '\x4', '\x2', '\x2', 'U', 'Z', '\x5', 
		'\x14', '\v', '\x2', 'V', 'W', '\a', '\x5', '\x2', '\x2', 'W', 'Y', '\x5', 
		'\x14', '\v', '\x2', 'X', 'V', '\x3', '\x2', '\x2', '\x2', 'Y', '\\', 
		'\x3', '\x2', '\x2', '\x2', 'Z', 'X', '\x3', '\x2', '\x2', '\x2', 'Z', 
		'[', '\x3', '\x2', '\x2', '\x2', '[', ']', '\x3', '\x2', '\x2', '\x2', 
		'\\', 'Z', '\x3', '\x2', '\x2', '\x2', ']', '^', '\a', '\x6', '\x2', '\x2', 
		'^', '`', '\x3', '\x2', '\x2', '\x2', '_', 'T', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x63', '\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x65', '\a', '\v', '\x2', '\x2', '\x65', '\x66', '\a', '\f', '\x2', '\x2', 
		'\x66', 'g', '\a', '\a', '\x2', '\x2', 'g', 'l', '\x5', '\x12', '\n', 
		'\x2', 'h', 'i', '\a', '\x3', '\x2', '\x2', 'i', 'k', '\x5', '\x12', '\n', 
		'\x2', 'j', 'h', '\x3', '\x2', '\x2', '\x2', 'k', 'n', '\x3', '\x2', '\x2', 
		'\x2', 'l', 'j', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\x3', '\x2', '\x2', 
		'\x2', 'm', 'o', '\x3', '\x2', '\x2', '\x2', 'n', 'l', '\x3', '\x2', '\x2', 
		'\x2', 'o', 'p', '\a', '\b', '\x2', '\x2', 'p', '\r', '\x3', '\x2', '\x2', 
		'\x2', 'q', 'r', '\a', '\a', '\x2', '\x2', 'r', 'w', '\x5', '\x12', '\n', 
		'\x2', 's', 't', '\a', '\x3', '\x2', '\x2', 't', 'v', '\x5', '\x12', '\n', 
		'\x2', 'u', 's', '\x3', '\x2', '\x2', '\x2', 'v', 'y', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'u', '\x3', '\x2', '\x2', '\x2', 'w', 'x', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'z', '\x3', '\x2', '\x2', '\x2', 'y', 'w', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '\b', '\x2', '\x2', '{', '|', '\a', '\t', '\x2', 
		'\x2', '|', '}', '\a', '\n', '\x2', '\x2', '}', '\x8B', '\x5', '\x10', 
		'\t', '\x2', '~', '\x7F', '\a', '\x4', '\x2', '\x2', '\x7F', '\x84', '\x5', 
		'\x14', '\v', '\x2', '\x80', '\x81', '\a', '\x5', '\x2', '\x2', '\x81', 
		'\x83', '\x5', '\x14', '\v', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x86', '\x3', '\x2', '\x2', '\x2', '\x84', '\x82', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x86', '\x84', '\x3', '\x2', '\x2', 
		'\x2', '\x87', '\x88', '\a', '\x6', '\x2', '\x2', '\x88', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x89', '~', '\x3', '\x2', '\x2', '\x2', '\x8A', 
		'\x8D', '\x3', '\x2', '\x2', '\x2', '\x8B', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x8B', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x8D', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8E', 
		'\x8F', '\a', '\v', '\x2', '\x2', '\x8F', '\x90', '\a', '\t', '\x2', '\x2', 
		'\x90', '\x91', '\a', '\a', '\x2', '\x2', '\x91', '\x96', '\x5', '\x12', 
		'\n', '\x2', '\x92', '\x93', '\a', '\x3', '\x2', '\x2', '\x93', '\x95', 
		'\x5', '\x12', '\n', '\x2', '\x94', '\x92', '\x3', '\x2', '\x2', '\x2', 
		'\x95', '\x98', '\x3', '\x2', '\x2', '\x2', '\x96', '\x94', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x97', '\x3', '\x2', '\x2', '\x2', '\x97', '\x99', 
		'\x3', '\x2', '\x2', '\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', 
		'\x99', '\x9A', '\a', '\b', '\x2', '\x2', '\x9A', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x9B', '\x9C', '\a', '\x12', '\x2', '\x2', '\x9C', '\x11', 
		'\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\a', '\x12', '\x2', '\x2', 
		'\x9E', '\x13', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x5', '\x16', 
		'\f', '\x2', '\xA0', '\xA1', '\a', '\x3', '\x2', '\x2', '\xA1', '\xA2', 
		'\x5', '\x18', '\r', '\x2', '\xA2', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\xA3', '\xA4', '\a', '\x12', '\x2', '\x2', '\xA4', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xA5', '\xA8', '\x5', '\x1A', '\xE', '\x2', '\xA6', '\xA8', 
		'\x5', '\x1C', '\xF', '\x2', '\xA7', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\xA7', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x19', '\x3', '\x2', 
		'\x2', '\x2', '\xA9', '\xAA', '\t', '\x2', '\x2', '\x2', '\xAA', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xAB', '\xAC', '\a', '\n', '\x2', '\x2', 
		'\xAC', '\xB1', '\x5', '\x1A', '\xE', '\x2', '\xAD', '\xAE', '\a', '\x5', 
		'\x2', '\x2', '\xAE', '\xB0', '\x5', '\x1A', '\xE', '\x2', '\xAF', '\xAD', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\xB3', '\x3', '\x2', '\x2', '\x2', 
		'\xB1', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xB1', '\xB2', '\x3', '\x2', 
		'\x2', '\x2', '\xB2', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\a', '\v', '\x2', '\x2', 
		'\xB5', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x12', '\"', '&', '-', '\x34', 
		'>', '\x45', 'M', 'Z', '\x61', 'l', 'w', '\x84', '\x8B', '\x96', '\xA7', 
		'\xB1',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
